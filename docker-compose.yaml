version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: que_agents_postgres
    environment:
      POSTGRES_DB: que_agents
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - que_agents_network

  # Que Agents Application
  que_agents:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: que_agents_app
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-postgres123}@postgres:5432/que_agents
      
      # API Keys (set these in .env file)
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GROQ_API_KEY: ${GROQ_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      
      # Application Settings
      PYTHONPATH: /app/src
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENVIRONMENT: ${ENVIRONMENT:-production}
    volumes:
      - ./configs:/app/configs:ro
      - ./data:/app/data:ro
      - chroma_data:/app/chroma_db
      - logs_data:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - que_agents_network

  # Redis (for caching and session management)
  redis:
    image: redis:7-alpine
    container_name: que_agents_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - que_agents_network

  # Nginx (reverse proxy and load balancer)
  nginx:
    image: nginx:alpine
    container_name: que_agents_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./template:/usr/share/nginx/html:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - que_agents
    restart: unless-stopped
    networks:
      - que_agents_network

volumes:
  postgres_data:
    driver: local
  chroma_data:
    driver: local
  redis_data:
    driver: local
  logs_data:
    driver: local

networks:
  que_agents_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16